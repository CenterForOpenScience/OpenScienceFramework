#######################
# Docker and OS Setup #
#######################

# Install the Docker Client
#
# OSX: https://www.docker.com/products/docker#/mac
# Windows: https://www.docker.com/products/docker#/windows
#
# - Grant the docker client additional memory and cpu (minimum of 4GB and 2 CPU)
#   OSX: https://docs.docker.com/docker-for-mac/#/preferences
#   Windows: https://docs.docker.com/docker-for-windows/#advanced

# Setup the Operation System
#
# OSX
# - Alias the loopback interface
#   sudo ifconfig lo0 alias 192.168.168.167
#
# Windows
# - Install Microsoft Loopback Adapter (Windows 10 follow community comments as the driver was renamed)
#   https://technet.microsoft.com/en-us/library/cc708322(v=ws.10).aspx
# - Rename the new Loopback Interface (typically called 'Ethernet 2')
#   - List interfaces
#     netsh interface show interface
#   - Rename the interface
#     netsh inteface set interface "Ethernet 2" newname="Loopback"
# - Assign the Loopback interface an IP address
#   netsh interface ip add address "Loopback" 192.168.168.167 255.255.255.255
# - Allow Docker to access to Drive your project is stored on
#   Open the Docker Client -> Settings -> Shared Drives -> e.g. C -> Apply


#############################
# Application Configuration #
#############################

# Application Settings
#
# e.g. OSF default local.py
# cp ./website/settings/local-dist.py ./website/settings/local.py
# cp ./api/base/settings/local-dist.py ./api/base/settings/local.py

# Environment variables (incl. remote debugging)
#
# e.g. .docker-compose.env
# WEB_REMOTE_DEBUG=192.168.168.167:11000
# API_REMOTE_DEBUG=192.168.168.167:12000
# WORKER_REMOTE_DEBUG=192.168.168.167:13000
#
# NOTE: Similar docker-compose.<name>.env environment configuration files exist for services.

# Mounting Service Code
#
# By modifying the docker-compose.override.yml file you can specify the relative path to
# your service code directory. e.g.
#
# services:
#   wb:
#     volumes:
#       - ../waterbutler/:/code


###############
# Docker Sync #
###############

# Install Docker Sync
#
# Instructions: docker-sync.io.
#
# sudo pip install macfsevents

# Running Docker Sync
#
# NOTE: Wait for Docker Sync to fully start before running any further docker-compose commands.
#
# docker-sync start


#######################
# Application Runtime #
#######################

# Logs can be viewed for any backgrounded container by running:
#
# docker-compose -f --tail 100 <container_name>

# Application Environment
#
# NOTE: When the various requirements installations are complete these containers will exit.
#
# docker-compose up requirements mfr_requirements wb_requirements

# Start Core Component Services
#
# docker-compose up -d elasticsearch tokumx

# Start the Assets Watcher
#
# NOTE: The first time the assets container is run it will take Webpack/NPM up to 15 minutes to compile resources.
#       When you see the BowerJS build occurring it is likely a safe time to move forward with starting the remaining
#       containers.
#
# docker-compose up -d assets

# Start the Services
#
# docker-compose up -d mfr wb fakecas

# Start the OSF Web and API Servers
#
# docker-compose up -d web api


#########################
# Application Debugging #
#########################

# Console Debugging with IPDB
#
# NOTE: You can detach from a container and leave it running using the CTRL-p CTRL-q key sequence.
#
# docker attach [projectname]_web_1


# Remote Debugging with PyCharm
#
# Add a Python Remote Debugger per container
# - Name: Remote Debug (web)
#   - Local host name: 192.168.168.167
#   - Port: 11000
#   - Path mappings:
#     - /Users/<whoami>/Projects/cos/osf : /code
#     - /Users/<whoami>/.virtualenvs/osf/lib/python2.7/site-packages : /usr/local/lib/python2.7/site-packages
#   - Single Instance only
# - Configure .docker-compose.env REMOTE_DEBUG environment variables to match settings.


##########################
# Cleanup & Docker Reset #
##########################

# Resetting the Environment
#
# WARNING: All volumes and containers are destroyed
#
# docker-compose down -v

# Delete a persistent storage volume
#
# docker-compose stop -t 0 tokumx
# docker-compose rm -v tokumx
# docker volume rm [projectname]_tokumx_data_vol


version: '2'

volumes:
  tokumx_data_vol:
    external: false
  elasticsearch_data_vol:
    external: false
  preprints_dist_vol:
    external: false
  mfr_requirements_vol:
    external: false
  wb_requirements_vol:
    external: false
  wb_osfstoragecache_vol:
    external: false
  osf_requirements_vol:
    external: false
  osf_node_modules_vol:
    external: false


services:

  ###################
  # Shared Services #
  ###################

  elasticsearch:
    image: elasticsearch:2
    ports:
      - 9200:9200
    volumes:
      - elasticsearch_data_vol:/usr/share/elasticsearch/data

#  postgres:
#    image: postgres
#    command: /bin/bash -c "sed -i -e 's/max_connections.*/max_connections = 5000/' /var/lib/postgresql/data/postgresql.conf || true && sed -i -e 's/#log_min_duration_statement = .*/log_min_duration_statement = 0/' /var/lib/postgresql/data/postgresql.conf || true && /docker-entrypoint.sh postgres"
#    ports:
#      - 5432:5432
#    environment:
#      POSTGRES_DB: osf

  tokumx:
    image: quay.io/centerforopenscience/tokumx:latest
    command: mongod --ipv6
    ports:
      - 27017:27017
    environment:
      TOKU_HUGE_PAGES_OK: 1
    volumes:
      - tokumx_data_vol:/data/db


  #########################
  # Modular File Renderer #
  #########################

  mfr_requirements:
    image: quay.io/centerforopenscience/mfr:develop
    command: /bin/bash -c "invoke install --develop && cp -Rf /usr/local/lib/python3.5/site-packages /"
    restart: 'no'
    volumes:
      - mfr_requirements_vol:/site-packages

  mfr:
    image: quay.io/centerforopenscience/mfr:develop
    command: invoke server
    restart: unless-stopped
    ports:
      - 7778:7778
    env_file:
      - .docker-compose.mfr.env
    stdin_open: true
    tty: true
    volumes:
      - mfr_requirements_vol:/usr/local/lib/python3.5/site-packages


  ###############
  # WaterButler #
  ###############

  wb_requirements:
    image: quay.io/centerforopenscience/waterbutler:develop
    command: /bin/bash -c "invoke install --develop && cp -Rf /usr/local/lib/python3.5/site-packages /"
    restart: 'no'
    volumes:
      - wb_requirements_vol:/site-packages

  wb:
    image: quay.io/centerforopenscience/waterbutler:develop
    command: invoke server
    restart: unless-stopped
    ports:
      - 7777:7777
    env_file:
      - .docker-compose.wb.env
    stdin_open: true
    tty: true
    volumes:
      - wb_requirements_vol:/usr/local/lib/python3.5/site-packages
      - wb_osfstoragecache_vol:/code/website/osfstoragecache


  ##################################
  # Central Authentication Service #
  ##################################

  fakecas:
    image: quay.io/centerforopenscience/fakecas:0.9.0
    command: fakecas -host=0.0.0.0:8080 -osfhost=192.168.168.167:5000 -dbaddress=192.168.168.167:27017
    restart: unless-stopped
    ports:
      - 8080:8080
    depends_on:
      - tokumx


  #############
  # Preprints #
  #############

  preprints:
    image: quay.io/centerforopenscience/ember-preprints:develop
    command: /bin/bash -c "npm install && ./node_modules/bower/bin/bower install --allow-root --config.intedractive=false && ./node_modules/ember-cli/bin/ember serve --host 0.0.0.0 --port 4200"
    restart: unless-stopped
    environment:
      - BACKEND=local
    expose:
      - 4200
    ports:
      - 4200:4200
    volumes:
      - preprints_dist_vol:/code/dist


  #######
  # OSF #
  #######

#  rabbitmq:
#    image: rabbitmq:management
#    ports:
#      - 5672:5672
#      - 15672:15672

#  flower:
#    image: quay.io/centerforopenscience/osf:develop
#    command: python manage.py celery flower
#    depends_on:
#      - rabbitmq
#    ports:
#      - 5555:5555
#    environment:
#      BROKER_URL: amqp://guest:guest@rabbitmq:5672/

#  beat:
#    image: quay.io/centerforopenscience/osf:develop
#    command: invoke celery_beat
#    depends_on:
#      - tokumx
#      - rabbitmq
#      - elasticsearch
#    volumes:
#      - osf_requirements_vol:/usr/local/lib/python2.7/site-packages
#      - ./:/code
#    environment:
#      DB_HOST: tokumx
#      ELASTIC_URI: elasticsearch:9200
#      BROKER_URL: amqp://guest:guest@rabbitmq:5672/

#  worker:
#    image: quay.io/centerforopenscience/osf:develop
#    command: invoke celery_worker
#    restart: unless-stopped
#    depends_on:
#      - tokumx
#      - rabbitmq
#      - elasticsearch
#    volumes:
#      - osf_requirements_vol:/usr/local/lib/python2.7/site-packages
#      - ./:/code
#    environment:
#      C_FORCE_ROOT: 1
#      DB_HOST: tokumx
#      ELASTIC_URI: elasticsearch:9200
#      BROKER_URL: amqp://guest:guest@rabbitmq:5672/

  requirements:
    image: quay.io/centerforopenscience/osf:develop
    command: /bin/bash -c "invoke requirements --quick && cp -Rf /usr/local/lib/python2.7/site-packages /"
    restart: 'no'
    volumes:
      - osf_requirements_vol:/site-packages

  assets:
    image: quay.io/centerforopenscience/osf:develop
    command: invoke assets -dw
    restart: unless-stopped
    volumes:
      - osf_requirements_vol:/usr/local/lib/python2.7/site-packages
      - osf_node_modules_vol:/code/node_modules

#  admin:
#    image: quay.io/centerforopenscience/osf:develop
#    command: invoke adminserver -h 0.0.0.0
#    restart: unless-stopped
#    ports:
#      - 8001:8001
#    depends_on:
#      - tokumx
##      - rabbitmq
#      - elasticsearch
#    env_file:
#      - .docker-compose.env
#    stdin_open: true
#    tty: true
#    volumes:
#      - osf_requirements_vol:/usr/local/lib/python2.7/site-packages
#      - osf_node_modules_vol:/code/node_modules

  api:
    image: quay.io/centerforopenscience/osf:develop
    command: invoke apiserver -h 0.0.0.0
    restart: unless-stopped
    ports:
      - 8000:8000
    depends_on:
      - tokumx
#      - rabbitmq
      - elasticsearch
    env_file:
      - .docker-compose.env
    stdin_open: true
    tty: true
    volumes:
      - osf_requirements_vol:/usr/local/lib/python2.7/site-packages
      - osf_node_modules_vol:/code/node_modules

  web:
    image: quay.io/centerforopenscience/osf:develop
    command: invoke server -h 0.0.0.0
    restart: unless-stopped
    ports:
      - 5000:5000
    depends_on:
      - tokumx
#      - rabbitmq
      - elasticsearch
    env_file:
      - .docker-compose.env
    stdin_open: true
    tty: true
    volumes:
      - osf_requirements_vol:/usr/local/lib/python2.7/site-packages
      - osf_node_modules_vol:/code/node_modules
      - preprints_dist_vol:/preprints
