{"version":3,"sources":["webpack:///../website/static/js/pages/project-settings-page.js","webpack:///../website/static/js/notificationsTreebeard.js?c5ba","webpack:///../website/static/js/projectSettingsTreebeardBase.js?6d44","webpack:///../website/static/js/changeMessage.js?aced**","webpack:///../website/static/js/projectSettings.js","webpack:///../website/static/css/addonsettings.css?5dcd","webpack:///../website/static/css/addonsettings.css","webpack:///../website/static/js/wikiSettingsTreebeard.js"],"names":[],"mappings":";;;;;AAAA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sCAAsC,0BAA0B;AAChE,aAAa;AACb;AACA;;AAEA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;;AAEA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0BAA0B;AACpE,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;;AAET;;AAEA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,KAAK;;AAEL,CAAC;;;;;;;;;;AChMD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+CAA+C;AAC1F,yBAAyB;AACzB;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iDAAiD,uFAAuF;AACxI,iDAAiD,qHAAqH;AACtK,iDAAiD,uGAAuG;AACxJ;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iDAAiD;AACjD,iIAAiI;AACjI;AACA,iDAAiD,uFAAuF;AACxI,iDAAiD,sHAAsH;AACvK,iDAAiD,uGAAuG;AACxJ;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;;;;;;;ACvNA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;;;;;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA;AACA,uC;AACA;AACA,CAAC;;AAED;;;;;;;;ACrCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;;;AAGD;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;;;;;;;ACnJA;;AAEA;AACA;AACA;AACA;AACA,gDAA6G;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,gCAAgC,UAAU,EAAE;AAC5C,C;;;;;;;ACjBA;AACA,kDAAkD,oBAAoB,GAAG,iBAAiB,kBAAkB,uBAAuB,GAAG,Q;;;;;;;ACDtI;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,iBAAiB;AACjB;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+CAA+C;AAC1F,yBAAyB;AACzB;AACA;;AAEA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iDAAiD,uFAAuF;AACxI,iDAAiD,uFAAuF;AACxI;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA","file":"project-settings-page.js","sourcesContent":["'use strict';\n\nvar $ = require('jquery');\nvar bootbox = require('bootbox');\nvar Raven = require('raven-js');\nvar ko = require('knockout');\n\nvar ProjectSettings = require('js/projectSettings.js');\n\nvar $osf = require('js/osfHelpers');\nrequire('css/addonsettings.css');\n\nvar ctx = window.contextVars;\n\n// Initialize treebeard grid for notifications\nvar ProjectNotifications = require('js/notificationsTreebeard.js');\nvar $notificationsMsg = $('#configureNotificationsMessage');\nvar notificationsURL = ctx.node.urls.api  + 'subscriptions/';\n// Need check because notifications settings don't exist on registration's settings page\nif ($('#grid').length) {\n    $.ajax({\n        url: notificationsURL,\n        type: 'GET',\n        dataType: 'json'\n    }).done(function(response) {\n        new ProjectNotifications(response);\n    }).fail(function(xhr, status, error) {\n        $notificationsMsg.addClass('text-danger');\n        $notificationsMsg.text('Could not retrieve notification settings.');\n        Raven.captureMessage('Could not GET notification settings.', {\n            url: notificationsURL, status: status, error: error\n        });\n    });\n}\n\n//Initialize treebeard grid for wiki\nvar ProjectWiki = require('js/wikiSettingsTreebeard.js');\nvar wikiSettingsURL = ctx.node.urls.api  + 'wiki/settings/';\nvar $wikiMsg = $('#configureWikiMessage');\n\nif ($('#wgrid').length) {\n    $.ajax({\n        url: wikiSettingsURL,\n        type: 'GET',\n        dataType: 'json'\n    }).done(function(response) {\n        new ProjectWiki(response);\n    }).fail(function(xhr, status, error) {\n        $wikiMsg.addClass('text-danger');\n        $wikiMsg.text('Could not retrieve wiki settings.');\n        Raven.captureMessage('Could not GET wiki settings.', {\n            url: wikiSettingsURL, status: status, error: error\n        });\n    });\n}\n\n$(document).ready(function() {\n\n    // Apply KO bindings for Node Category Settings\n    var categories = [];\n    var keys = Object.keys(window.contextVars.nodeCategories);\n    for (var i = 0; i < keys.length; i++) {\n        categories.push({\n            label: window.contextVars.nodeCategories[keys[i]],\n            value: keys[i]\n        });\n    }\n    var disableCategory = !window.contextVars.node.parentExists;\n    // need check because node category doesn't exist for registrations\n    if ($('#nodeCategorySettings').length) {\n        var categorySettingsVM = new ProjectSettings.NodeCategorySettings(\n            window.contextVars.node.category,\n            categories,\n            window.contextVars.node.urls.update,\n            disableCategory\n        );\n        $osf.applyBindings(categorySettingsVM, $('#nodeCategorySettings')[0]);\n    }\n\n    $('#deleteNode').on('click', function() {\n        ProjectSettings.getConfirmationCode(ctx.node.nodeType);\n    });\n\n    // TODO: Knockout-ify me\n    $('#commentSettings').on('submit', function() {\n        var $commentMsg = $('#configureCommentingMessage');\n\n        var $this = $(this);\n        var commentLevel = $this.find('input[name=\"commentLevel\"]:checked').val();\n\n        $osf.postJSON(\n            ctx.node.urls.api + 'settings/comments/',\n            {commentLevel: commentLevel}\n        ).done(function() {\n            $commentMsg.text('Successfully updated settings.');\n            $commentMsg.addClass('text-success');\n            if($osf.isSafari()){\n                //Safari can't update jquery style change before reloading. So delay is applied here\n                setTimeout(function(){window.location.reload();}, 100);\n            } else {\n                window.location.reload();\n            }\n\n        }).fail(function() {\n            bootbox.alert({\n                message: 'Could not set commenting configuration. Please try again.',\n                buttons:{\n                    ok:{\n                        label:'Close',\n                        className:'btn-default'\n                    }\n                }\n            });\n        });\n\n        return false;\n\n    });\n\n    var checkedOnLoad = $('#selectAddonsForm input:checked');\n    var uncheckedOnLoad = $('#selectAddonsForm input:not(:checked)');\n\n    // Set up submission for addon selection form\n    $('#selectAddonsForm').on('submit', function() {\n\n        var formData = {};\n        $('#selectAddonsForm').find('input').each(function(idx, elm) {\n            var $elm = $(elm);\n            formData[$elm.attr('name')] = $elm.is(':checked');\n        });\n        var msgElm = $(this).find('.addon-settings-message');\n        $.ajax({\n            url: ctx.node.urls.api + 'settings/addons/',\n            data: JSON.stringify(formData),\n            type: 'POST',\n            contentType: 'application/json',\n            dataType: 'json',\n            success: function() {\n                msgElm.text('Settings updated').fadeIn();\n                checkedOnLoad = $('#selectAddonsForm input:checked');\n                uncheckedOnLoad = $('#selectAddonsForm input:not(:checked)');\n                if($osf.isSafari()){\n                    //Safari can't update jquery style change before reloading. So delay is applied here\n                    setTimeout(function(){window.location.reload();}, 100);\n                } else {\n                    window.location.reload();\n                }\n            }\n        });\n\n        return false;\n\n    });\n\n    /* Before closing the page, Check whether the newly checked addon are updated or not */\n    $(window).on('beforeunload',function() {\n      //new checked items but not updated\n      var checked = uncheckedOnLoad.filter('#selectAddonsForm input:checked');\n      //new unchecked items but not updated\n      var unchecked = checkedOnLoad.filter('#selectAddonsForm input:not(:checked)');\n\n      if(unchecked.length > 0 || checked.length > 0) {\n        return 'The changes on addon setting are not submitted!';\n      }\n    });\n\n    // Show capabilities modal on selecting an addon; unselect if user\n    // rejects terms\n    $('.addon-select').on('change', function() {\n        var that = this,\n            $that = $(that);\n        if ($that.is(':checked')) {\n            var name = $that.attr('name');\n            var capabilities = $('#capabilities-' + name).html();\n            if (capabilities) {\n                bootbox.confirm({\n                    message: capabilities,\n                    callback: function(result) {\n                        if (!result) {\n                            $(that).attr('checked', false);\n                        }\n                    },\n                    buttons:{\n                        confirm:{\n                            label:'Confirm'\n                        }\n                    }\n               });\n            }\n        }\n    });\n\n});\n\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../website/static/js/pages/project-settings-page.js\n ** module id = 0\n ** module chunks = 38\n **/","'use strict';\n\nvar $ = require('jquery');\nvar m = require('mithril');\nvar Treebeard = require('treebeard');\nvar $osf = require('js/osfHelpers');\nvar projectSettingsTreebeardBase = require('js/projectSettingsTreebeardBase');\n\nfunction expandOnLoad() {\n    var tb = this;  // jshint ignore: line\n    for (var i = 0; i < tb.treeData.children.length; i++) {\n        var parent = tb.treeData.children[i];\n        tb.updateFolder(null, parent);\n        expandChildren(tb, parent.children);\n    }\n}\n\nfunction expandChildren(tb, children) {\n    var openParent = false;\n    for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        var parent = children[i].parent();\n        if (child.data.kind === 'event' && child.data.event.notificationType !== 'adopt_parent') {\n            openParent = true;\n        }\n        if (child.children.length > 0) {\n            expandChildren(tb, child.children);\n        }\n    }\n    if (openParent) {\n        openAncestors(tb, children[0]);\n    }\n}\n\nfunction openAncestors (tb, item) {\n    var parent = item.parent();\n    if(parent && parent.id > 0) {\n        tb.updateFolder(null, parent);\n        openAncestors(tb, parent);\n    }\n}\n\nfunction subscribe(item, notification_type) {\n    var id = item.parent().data.node.id;\n    var event = item.data.event.title;\n    var payload = {\n        'id': id,\n        'event': event,\n        'notification_type': notification_type\n    };\n    $osf.postJSON(\n        '/api/v1/subscriptions/',\n        payload\n    ).done(function(){\n        //'notfiy-success' is to override default class 'success' in treebeard\n        item.notify.update('Settings updated', 'notify-success', 1, 2000);\n        item.data.event.notificationType = notification_type;\n    }).fail(function() {\n        item.notify.update('Could not update settings', 'notify-danger', 1, 2000);\n    });\n}\n\nfunction displayParentNotificationType(item){\n    var notificationTypeDescriptions = {\n        'email_transactional': 'Instantly',\n        'email_digest': 'Daily',\n        'adopt_parent': 'Adopt setting from parent project',\n        'none': 'Never'\n    };\n\n    if (item.data.event.parent_notification_type) {\n        if (item.parent().parent().parent() === undefined) {\n            return '(' + notificationTypeDescriptions[item.data.event.parent_notification_type] + ')';\n        }\n    }\n    return '';\n}\n\n\nfunction ProjectNotifications(data) {\n\n    //  Treebeard version\n    var tbOptions = $.extend({}, projectSettingsTreebeardBase.defaults, {\n        divID: 'grid',\n        filesData: data,\n        naturalScrollLimit : 0,\n        resolveRows: function notificationResolveRows(item){\n            var columns = [];\n            var iconcss = '';\n            // check if should not get icon\n            if(item.children.length < 1 ){\n                iconcss = 'tb-no-icon';\n            }\n            if (item.data.kind === 'heading') {\n                if (item.data.children.length === 0) {\n                    columns.push({\n                        data : 'project',  // Data field name\n                        folderIcons : false,\n                        filter : true,\n                        sortInclude : false,\n                        custom : function() {\n                            return m('div[style=\"padding-left:5px\"]',\n                                        [m ('p', [\n                                                m('b', item.data.node.title + ': '),\n                                                m('span[class=\"text-warning\"]', ' No configured projects.')]\n                                        )]\n                            );\n                        }\n                    });\n                } else {\n                    columns.push({\n                        data : 'project',  // Data field name\n                        folderIcons : false,\n                        filter : true,\n                        sortInclude : false,\n                        custom : function() {\n                            return m('div[style=\"padding-left:5px\"]',\n                                    [m('p',\n                                        [m('b', item.data.node.title + ':')]\n                                )]\n                            );\n                        }\n                    });\n                }\n            }\n            else if (item.data.kind === 'folder' || item.data.kind === 'node') {\n                columns.push({\n                    data : 'project',  // Data field name\n                    folderIcons : true,\n                    filter : true,\n                    sortInclude : false,\n                    custom : function() {\n                        if (item.data.node.url !== '') {\n                            return m('a', { href : item.data.node.url, target : '_blank' }, item.data.node.title);\n                        } else {\n                            return m('span', item.data.node.title);\n                        }\n\n                    }\n                });\n            }\n            else if (item.parent().data.kind === 'folder' || item.parent().data.kind === 'heading' && item.data.kind === 'event') {\n                columns.push(\n                {\n                    data : 'project',  // Data field name\n                    folderIcons : true,\n                    filter : true,\n                    css : iconcss,\n                    sortInclude : false,\n                    custom : function(item, col) {\n                        return item.data.event.description;\n                    }\n                },\n                {\n                    data : 'notificationType',  // Data field name\n                    folderIcons : false,\n                    filter : false,\n                    custom : function(item, col) {\n                        return m('div[style=\"padding-right:10px\"]',\n                            [m('select.form-control', {\n                                onchange: function(ev) {\n                                    subscribe(item, ev.target.value);\n                                }},\n                                [\n                                    m('option', {value: 'none', selected : item.data.event.notificationType === 'none' ? 'selected': ''}, 'Never'),\n                                    m('option', {value: 'email_transactional', selected : item.data.event.notificationType === 'email_transactional' ? 'selected': ''}, 'Instantly'),\n                                    m('option', {value: 'email_digest', selected : item.data.event.notificationType === 'email_digest' ? 'selected': ''}, 'Daily')\n                            ])\n                        ]);\n                    }\n                });\n            }\n            else {\n                columns.push(\n                {\n                    data : 'project',  // Data field name\n                    folderIcons : true,\n                    filter : true,\n                    css : iconcss,\n                    sortInclude : false,\n                    custom : function() {\n                        return item.data.event.description;\n\n                    }\n                },\n                {\n                    data : 'notificationType',  // Data field name\n                    folderIcons : false,\n                    filter : false,\n                    custom : function() {\n                        return  m('div[style=\"padding-right:10px\"]',\n                            [m('select.form-control', {\n                                onchange: function(ev) {\n                                    subscribe(item, ev.target.value);\n                                }},\n                                [\n                                    m('option', {value: 'adopt_parent',\n                                                 selected: item.data.event.notificationType === 'adopt_parent' ? 'selected' : ''},\n                                                 'Adopt setting from parent project ' + displayParentNotificationType(item)),\n                                    m('option', {value: 'none', selected : item.data.event.notificationType === 'none' ? 'selected': ''}, 'Never'),\n                                    m('option', {value: 'email_transactional',  selected : item.data.event.notificationType === 'email_transactional' ? 'selected': ''}, 'Instantly'),\n                                    m('option', {value: 'email_digest', selected : item.data.event.notificationType === 'email_digest' ? 'selected': ''}, 'Daily')\n                            ])\n                        ]);\n                    }\n                });\n            }\n\n            return columns;\n        }\n    });\n    var grid = new Treebeard(tbOptions);\n    expandOnLoad.call(grid.tbController);\n}\n\nmodule.exports = ProjectNotifications;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../website/static/js/notificationsTreebeard.js\n ** module id = 376\n ** module chunks = 29 38\n **/","/**\n * Treebeard base for project settings\n * Currently used for wiki and notification settings\n */\n\n'use strict';\n\nvar $ = require('jquery');\nvar m = require('mithril');\nvar Treebeard = require('treebeard');\nvar Fangorn = require('js/fangorn');\n\n\nfunction resolveToggle(item) {\n    var toggleMinus = m('i.fa.fa-minus', ' '),\n        togglePlus = m('i.fa.fa-plus', ' ');\n\n    if (item.children.length > 0) {\n        if (item.open) {\n            return toggleMinus;\n        }\n        return togglePlus;\n    }\n    item.open = true;\n    return '';\n}\n\nmodule.exports = {\n    defaults: {\n        rowHeight : 33,         // user can override or get from .tb-row height\n        resolveToggle: resolveToggle,\n        paginate : false,       // Whether the applet starts with pagination or not.\n        paginateToggle : false, // Show the buttons that allow users to switch between scroll and paginate.\n        uploads : false,         // Turns dropzone on/off.\n        resolveIcon : Fangorn.Utils.resolveIconView,\n        hideColumnTitles: true,\n        columnTitles : function columnTitles(item, col) {\n            return [\n                {\n                    title: 'Project',\n                    width: '60%',\n                    sortType : 'text',\n                    sort : false\n                },\n                {\n                    title: 'Editing Toggle',\n                    width : '40%',\n                    sort : false\n\n                }\n            ];\n        },\n        ontogglefolder : function (item){\n            var containerHeight = this.select('#tb-tbody').height();\n            this.options.showTotal = Math.floor(containerHeight / this.options.rowHeight) + 1;\n            this.redraw();\n        },\n        sortButtonSelector : {\n            up : 'i.fa.fa-chevron-up',\n            down : 'i.fa.fa-chevron-down'\n        },\n        showFilter : false,     // Gives the option to filter by showing the filter box.\n        allowMove : false,       // Turn moving on or off.\n        hoverClass : '',\n        resolveRefreshIcon : function() {\n          return m('i.fa.fa-refresh.fa-spin');\n        }\n    }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../website/static/js/projectSettingsTreebeardBase.js\n ** module id = 377\n ** module chunks = 29 38\n **/","/**\n * ViewModel mixin for displaying form input help messages.\n * Adds message and messageClass observables that can be changed with the\n * changeMessage method.\n */\n'use strict';\nvar ko = require('knockout');\nvar oop = require('js/oop');\n/** Change the flashed status message */\n\nvar ChangeMessageMixin = oop.defclass({\n    constructor: function() {\n        this.message = ko.observable('');\n        this.messageClass = ko.observable('text-info');\n    },\n    changeMessage: function(text, css, timeout) {\n        var self = this;\n        if (typeof text === 'function') {\n            text = text();\n        }\n        self.message(text);\n        var cssClass = css || 'text-info';\n        self.messageClass(cssClass);\n        if (timeout) {\n            // Reset message after timeout period\n            window.setTimeout(function () {\n                self.message('');\n                self.messageClass('text-info');\n            }, timeout);\n        }\n    },\n    resetMessage: function() {\n        this.message('');\n        this.messageClass('text-info');        \n    }\n});\n\nmodule.exports = ChangeMessageMixin;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../website/static/js/changeMessage.js\n ** module id = 379\n ** module chunks = 30 33 34 38 40 47 49\n **/","'use strict';\n\nvar $ = require('jquery');\nvar bootbox = require('bootbox');\nvar Raven = require('raven-js');\nvar ko = require('knockout');\nvar $osf = require('js/osfHelpers');\nvar oop = require('js/oop');\nvar ChangeMessageMixin = require('js/changeMessage');\n\nvar NodeCategorySettings = oop.extend(\n    ChangeMessageMixin,\n    {\n        constructor: function(category, categories, updateUrl, disabled) {\n            this.super.constructor.call(this);\n\n            var self = this;\n\n            self.disabled = disabled || false;\n            self.UPDATE_SUCCESS_MESSAGE = 'Category updated successfully';\n            self.UPDATE_ERROR_MESSAGE = 'Error updating category, please try again. If the problem persists, email ' +\n                '<a href=\"mailto:support@osf.io\">support@osf.io</a>.';\n            self.UPDATE_ERROR_MESSAGE_RAVEN = 'Error updating Node.category';\n\n            self.INSTANTIATION_ERROR_MESSAGE = 'Trying to instantiate NodeCategorySettings view model without an update URL';\n\n            self.MESSAGE_SUCCESS_CLASS = 'text-success';\n            self.MESSAGE_ERROR_CLASS = 'text-danger';\n\n            if (!updateUrl) {\n                throw new Error(self.INSTANTIATION_ERROR_MESSAGE);\n            }\n\n            self.categories = categories;\n            self.category = ko.observable(category);\n            self.updateUrl = updateUrl;\n\n            self.selectedCategory = ko.observable(category);\n            self.dirty = ko.observable(false);\n            self.selectedCategory.subscribe(function(value) {\n                if (value !== self.category()) {\n                    self.dirty(true);\n                }\n            });\n        },\n        updateSuccess: function(newcategory) {\n            var self = this;\n            self.changeMessage(self.UPDATE_SUCCESS_MESSAGE, self.MESSAGE_SUCCESS_CLASS);\n            self.category(newcategory);\n            self.dirty(false);\n        },\n        updateError: function(xhr, status, error) {\n            var self = this;\n            self.changeMessage(self.UPDATE_ERROR_MESSAGE, self.MESSAGE_ERROR_CLASS);\n            Raven.captureMessage(self.UPDATE_ERROR_MESSAGE_RAVEN, {\n                url: self.updateUrl,\n                textStatus: status,\n                err: error\n            });\n        },\n        updateCategory: function() {\n            var self = this;\n            return $osf.putJSON(self.updateUrl, {\n                    category: self.selectedCategory()\n                })\n                .then(function(response) {\n                    return response.updated_fields.category;\n                })\n                .done(self.updateSuccess.bind(self))\n                .fail(self.updateError.bind(self));\n        },\n        cancelUpdateCategory: function() {\n            var self = this;\n            self.selectedCategory(self.category());\n            self.dirty(false);\n            self.resetMessage();\n        }\n    });\n\nvar ProjectSettings = {\n    NodeCategorySettings: NodeCategorySettings\n};\n\n// TODO: Pass this in as an argument rather than relying on global contextVars\nvar nodeApiUrl = window.contextVars.node.urls.api;\n\n\n// Request the first 5 contributors, for display in the deletion modal\nvar contribs = [];\nvar moreContribs = 0;\n\nvar contribURL = nodeApiUrl + 'get_contributors/?limit=5';\nvar request = $.ajax({\n    url: contribURL,\n    type: 'get',\n    dataType: 'json'\n});\nrequest.done(function(response) {\n    // TODO: Remove reliance on contextVars\n    var currentUserName = window.contextVars.currentUser.fullname;\n    contribs = response.contributors.filter(function(contrib) {\n        return contrib.shortname !== currentUserName;\n    });\n    moreContribs = response.more;\n});\nrequest.fail(function(xhr, textStatus, err) {\n    Raven.captureMessage('Error requesting contributors', {\n        url: contribURL,\n        textStatus: textStatus,\n        err: err,\n    });\n});\n\n\n/**\n * Pulls a random name from the scientist list to use as confirmation string\n *  Ignores case and whitespace\n */\nProjectSettings.getConfirmationCode = function(nodeType) {\n\n    // It's possible that the XHR request for contributors has not finished before getting to this\n    // point; only construct the HTML for the list of contributors if the contribs list is populated\n    var message = '<p>It will no longer be available to other contributors on the project.';\n\n    $osf.confirmDangerousAction({\n        title: 'Are you sure you want to delete this ' + nodeType + '?',\n        message: message,\n        callback: function () {\n            var request = $.ajax({\n                type: 'DELETE',\n                dataType: 'json',\n                url: nodeApiUrl\n            });\n            request.done(function(response) {\n                // Redirect to either the parent project or the dashboard\n                window.location.href = response.url;\n            });\n            request.fail($osf.handleJSONError);\n        },\n        buttons: {\n            success: {\n                label: 'Delete'\n            }\n        }\n    });\n};\n\nmodule.exports = ProjectSettings;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../website/static/js/projectSettings.js\n ** module id = 405\n ** module chunks = 38\n **/","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!/Users/laurenbarker/GitHub/osf.io/node_modules/css-loader/index.js!/Users/laurenbarker/GitHub/osf.io/website/static/css/addonsettings.css\");\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = require(\"!/Users/laurenbarker/GitHub/osf.io/node_modules/style-loader/addStyles.js\")(content, {});\n// Hot Module Replacement\nif(module.hot) {\n\t// When the styles change, update the <style> tags\n\tmodule.hot.accept(\"!!/Users/laurenbarker/GitHub/osf.io/node_modules/css-loader/index.js!/Users/laurenbarker/GitHub/osf.io/website/static/css/addonsettings.css\", function() {\n\t\tvar newContent = require(\"!!/Users/laurenbarker/GitHub/osf.io/node_modules/css-loader/index.js!/Users/laurenbarker/GitHub/osf.io/website/static/css/addonsettings.css\");\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\tupdate(newContent);\n\t});\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../website/static/css/addonsettings.css\n ** module id = 406\n ** module chunks = 38\n **/","exports = module.exports = require(\"/Users/laurenbarker/GitHub/osf.io/node_modules/css-loader/cssToString.js\")();\nexports.push([module.id, \".filebrowser #tb-tbody {\\n    height: 300px;\\n}\\n\\n.addon-icon {\\n    width: 20px;\\n    margin-top: -2px;\\n}\", \"\"]);\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/css-loader!../website/static/css/addonsettings.css\n ** module id = 407\n ** module chunks = 38\n **/","'use strict';\n\nvar $ = require('jquery');\nvar bootbox = require('bootbox');\nvar m = require('mithril');\nvar Treebeard = require('treebeard');\nvar $osf = require('js/osfHelpers');\nvar projectSettingsTreebeardBase = require('js/projectSettingsTreebeardBase');\n\nfunction expandOnLoad() {\n    var tb = this;  // jshint ignore: line\n    for (var i = 0; i < tb.treeData.children.length; i++) {\n        var parent = tb.treeData.children[i];\n        tb.updateFolder(null, parent);\n    }\n}\n\nfunction beforeChangePermissions(item, permission){\n    var title = item.parent().data.node.title;\n    if(permission === 'public'){\n        bootbox.dialog({\n            title: 'Make publicly editable',\n            message: 'Are you sure you want to make the wiki of <b>' +title+\n                '</b> publicly editable? This will allow any logged in user to edit the content of this wiki. ' +\n                '<b>Note</b>: Users without write access will not be able to add, delete, or rename pages.',\n            buttons: {\n                cancel : {\n                    label : 'Cancel',\n                    className : 'btn-default',\n                    callback : function() {item.notify.update('', 'notify-primary', 1, 10);}\n                },\n                success: {\n                    label: 'Apply',\n                    className: 'btn-primary',\n                    callback: function() {changePermissions(item, permission);}\n                }\n            }\n        });\n    }\n    else {\n        changePermissions(item, permission);\n    }\n}\n\nfunction changePermissions(item, permission) {\n    var id = item.parent().data.node.id;\n\n    return $osf.putJSON(\n        buildPermissionsURL(item), {'permission': permission}\n    ).done(function(){\n        item.notify.update('Settings updated', 'notify-success', 1, 2000);\n        item.data.select.permission = permission;\n    }).fail(function() {\n        item.notify.update('Could not update settings', 'notify-danger', 1, 2000);\n    });\n}\n\n// Helper to build path\nfunction buildPermissionsURL(item) {\n    var id = item.parent().data.node.id;\n    var permissionsChangePath = '/api/v1/project/'+ id +\n        '/wiki/settings/';\n    return permissionsChangePath;\n}\n\nfunction ProjectWiki(data) {\n\n    //  Treebeard version\n    var tbOptions = $.extend({}, projectSettingsTreebeardBase.defaults, {\n        filesData: data,\n        divID: 'wgrid',\n        resolveRows: function wikiResolveRows(item){\n            var columns = [];\n            var iconcss = '';\n            // check if should not get icon\n            if(item.children.length < 1 ){\n                iconcss = 'tb-no-icon';\n            }\n            if (item.data.kind === 'folder' || item.data.kind === 'node') {\n                columns.push({\n                    data : 'project',  // Data field name\n                    folderIcons : true,\n                    filter : true,\n                    sortInclude : false,\n                    custom : function() {\n                        if (item.data.node.url !== '') {\n                            return m('a', { href : item.data.node.url, target : '_blank' }, item.data.node.title);\n                        } else {\n                            return m('span', item.data.node.title);\n                        }\n\n                    }\n                });\n            }\n\n            else {\n                columns.push(\n                {\n                    data : 'project',  // Data field name\n                    folderIcons : true,\n                    filter : true,\n                    css : iconcss,\n                    sortInclude : false,\n                    custom : function() {\n                        return 'Who can edit';\n                    }\n                },\n                {\n                    data : 'permission',  // Data field name\n                    folderIcons : false,\n                    filter : false,\n                    custom : function() {\n                        return  m('div[style=\"padding-right:10px\"]',\n                            [m('select.form-control', {\n                                onchange: function(ev) {\n                                    beforeChangePermissions(item, ev.target.value);\n                                }},\n                                [\n                                    m('option', {value: 'private', selected : item.data.select.permission === 'public' ? 'selected': ''}, 'Contributors (with write access)'),\n                                    m('option', {value: 'public', selected : item.data.select.permission === 'public' ? 'selected': '' }, 'All OSF users')\n                            ])\n                        ]);\n                    }\n                });\n            }\n\n            return columns;\n        }\n    });\n    var wgrid = new Treebeard(tbOptions);\n    expandOnLoad.call(wgrid.tbController);\n}\n\nmodule.exports = ProjectWiki;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../website/static/js/wikiSettingsTreebeard.js\n ** module id = 408\n ** module chunks = 38\n **/"],"sourceRoot":""}