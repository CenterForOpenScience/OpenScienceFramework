{"version":3,"sources":["webpack:///../website/addons/dataverse/static/files.js","webpack:///../website/addons/dataverse/static/dataverseFangornConfig.js"],"names":[],"mappings":";;;;;AAAA;;;;;;;;ACAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,gEAAgE,6BAA6B;AAC7F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,6BAA6B,0DAA0D;AACvF;AACA;AACA,0CAA0C,8EAA8E;AACxH;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAwC;AACxD;AACA;;AAEA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,mDAAmD,2CAA2C,qBAAqB,EAAE;AACrH;;AAEA;AACA,qDAAqD,2BAA2B;AAChF;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"dataverse/files.js","sourcesContent":["require('./dataverseFangornConfig.js');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../website/addons/dataverse/static/files.js\n ** module id = 0\n ** module chunks = 5\n **/","'use strict';\n\nvar m = require('mithril');\nvar URI = require('URIjs');\nvar $ = require('jquery');\n\nvar Fangorn = require('js/fangorn');\nvar waterbutler = require('js/waterbutler');\nvar $osf = require('js/osfHelpers');\n\nfunction changeState(grid, item, version) {\n    item.data.version = version;\n    grid.updateFolder(null, item);\n}\n\nfunction _downloadEvent(event, item, col) {\n    event.stopPropagation();\n    window.location = waterbutler.buildTreeBeardDownload(item, {path: item.data.extra.fileId});\n}\n\n// Define Fangorn Button Actions\nvar _dataverseItemButtons = {\n    view: function (ctrl, args, children) {\n        var buttons = [];\n        var tb = args.treebeard;\n        var item = args.item;\n        function _uploadEvent(event, item, col) {\n            event.stopPropagation();\n            tb.dropzone.hiddenFileInput.click();\n            tb.dropzoneItemCache = item;\n        }\n        function dataversePublish(event, item, col) {\n            var both = !item.data.dataverseIsPublished;\n            var url = item.data.urls.publish;\n            var toPublish = both ? 'Dataverse and dataset' : 'dataset';\n            var modalContent = [\n                m('p.m-md', both ? 'This dataset cannot be published until ' + item.data.dataverse + ' Dataverse is published. ' : ''),\n                m('p.m-md', 'By publishing this ' + toPublish + ', all content will be made available through the Harvard Dataverse using their internal privacy settings, regardless of your OSF project settings. '),\n                m('p.font-thick.m-md', both ? 'Do you want to publish this Dataverse AND this dataset?' : 'Are you sure you want to publish this dataset?')\n            ];\n            var modalActions = [\n                m('button.btn.btn-default', {\n                    'onclick': function () {\n                        tb.modal.dismiss();\n                    }\n                }, 'Cancel'),\n                m('button.btn.btn-primary', {\n                    'onclick': function () {\n                        publishDataset();\n                    }\n                }, 'Publish')\n            ];\n\n            tb.modal.update(modalContent, modalActions, m('h3.break-word.modal-title', 'Publish this ' + toPublish + '?'));\n\n            function publishDataset() {\n                tb.modal.dismiss();\n                item.notify.update('Publishing ' + toPublish, 'info', 1, 1);\n                $.osf.putJSON(\n                    url,\n                    {'publish_both': both}\n                ).done(function (data) {\n                    item.notify.update();\n                    var modalContent = [\n                        m('p.m-md', 'Your content has been published.')\n                    ];\n                    var modalActions = [\n                        m('button.btn.btn-primary', {\n                            'onclick': function () {\n                                tb.modal.dismiss();\n                            }\n                        }, 'Okay')\n                    ];\n                    tb.modal.update(modalContent, modalActions);\n                    item.data.dataverseIsPublished = true;\n                    item.data.hasPublishedFiles = item.children.length > 0;\n                    item.data.version = item.data.hasPublishedFiles ? 'latest-published' : 'latest';\n                }).fail(function (xhr, status, error) {\n                    var statusCode = xhr.responseJSON.code;\n                    var message;\n                    switch (statusCode) {\n                    case 405:\n                        message = 'Error: This dataset cannot be published until ' + item.data.dataverse + ' Dataverse is published.';\n                        break;\n                    case 409:\n                        message = 'This dataset version has already been published.';\n                        break;\n                    default:\n                        message = 'Error: Something went wrong when attempting to publish your dataset.';\n                        Raven.captureMessage('Could not publish dataset', {\n                            url: url,\n                            textStatus: status,\n                            error: error\n                        });\n                    }\n\n                    var modalContent = [\n                        m('p.m-md', message)\n                    ];\n                    var modalActions = [\n                        m('button.btn.btn-primary', {\n                            'onclick': function () {\n                                tb.modal.dismiss();\n                            }\n                        }, 'Okay')\n                    ];\n                    tb.modal.update(modalContent, modalActions);\n                });\n            }\n        }\n        if (item.data.addonFullname) {\n            var options = [\n                m('option', {selected: item.data.version === 'latest', value: 'latest'}, 'Draft')\n            ];\n            if (item.data.dataverseIsPublished) {\n                options.push(m('option', {selected: item.data.version === 'latest-published', value: 'latest-published'}, 'Published'));\n            }\n            buttons.push(\n                m.component(Fangorn.Components.dropdown, {\n                    'label': 'Version: ',\n                    onchange: function (e) {\n                        changeState(tb, item, e.target.value);\n                    },\n                    icon: 'fa fa-external-link',\n                    className: 'text-info'\n                }, options)\n            );\n        }\n        if (tb.options.placement !== 'fileview') {\n            if (item.kind === 'folder' && item.data.addonFullname && item.data.version === 'latest' && item.data.permissions.edit) {\n                buttons.push(\n                    m.component(Fangorn.Components.button, {\n                        onclick: function (event) {\n                            _uploadEvent.call(tb, event, item);\n                        },\n                        icon: 'fa fa-upload',\n                        className: 'text-success'\n                    }, 'Upload'),\n                    m.component(Fangorn.Components.button, {\n                        onclick: function (event) {\n                            dataversePublish.call(tb, event, item);\n                        },\n                        icon: 'fa fa-globe',\n                        className: 'text-primary'\n                    }, 'Publish')\n                );\n            } else if (item.kind === 'folder' && !item.data.addonFullname) {\n                buttons.push(\n                    m.component(Fangorn.Components.button, {\n                        onclick: function (event) {\n                            _uploadEvent.call(tb, event, item);\n                        },\n                        icon: 'fa fa-upload',\n                        className: 'text-success'\n                    }, 'Upload')\n                );\n            } else if (item.kind === 'file') {\n                buttons.push(\n                    m.component(Fangorn.Components.button, {\n                        onclick: function (event) {\n                            _downloadEvent.call(tb, event, item);\n                        },\n                        icon: 'fa fa-download',\n                        className: 'text-primary'\n                    }, 'Download')\n                );\n                if (item.parent().data.version === 'latest' && item.data.permissions.edit) {\n                    buttons.push(\n                        m.component(Fangorn.Components.button, {\n                            onclick: function (event) {\n                                Fangorn.ButtonEvents._removeEvent.call(tb, event, [item]);\n                            },\n                            icon: 'fa fa-trash',\n                            className: 'text-danger'\n                        }, 'Delete')\n                    );\n                }\n                if (item.data.permissions && item.data.permissions.view) {\n                    buttons.push(\n                        m.component(Fangorn.Components.button, {\n                            onclick: function(event) {\n                                gotoFile(item);\n                            },\n                            icon: 'fa fa-external-link',\n                            className : 'text-info'\n                        }, 'View'));\n\n                }\n            }\n        }\n        return m('span', buttons);\n    }\n};\n\nfunction gotoFile (item) {\n    var redir = new URI(item.data.nodeUrl);\n    window.location = redir\n        .segment('files')\n        .segment(item.data.provider)\n        .segment(item.data.extra.fileId)\n        .query({version: item.data.extra.datasetVersion})\n        .toString();\n}\n\nfunction _fangornDataverseTitle(item, col) {\n    var tb = this;\n    if (item.data.isAddonRoot && item.connected === false) { // as opposed to undefined, avoids unnecessary setting of this value\n        return Fangorn.Utils.connectCheckTemplate.call(this, item);\n    }\n    var version = item.data.version === 'latest-published' ? 'Published' : 'Draft';\n    if (item.data.addonFullname) {\n        var contents = [m('dataverse-name', item.data.name + ' (' + version + ')')];\n        if (item.data.hasPublishedFiles) {\n            if (item.data.permissions.edit) {\n                // Default to version in url parameters for file view page\n                var urlParams = $osf.urlParams();\n                if (urlParams.version && urlParams.version !== item.data.version) {\n                    item.data.version = urlParams.version;\n                }\n            } else {\n                contents.push(\n                    m('span.text-muted', '[Published]')\n                );\n            }\n        } else {\n            contents.push(\n                m('span.text.text-muted', '[Draft]')\n            );\n        }\n        return m('span', contents);\n    } else {\n        return m('span', [\n            m('dataverse-name.fg-file-links', {\n                onclick: function () {\n                    gotoFile(item);\n                }\n            }, item.data.name\n                )\n        ]);\n    }\n}\n\nfunction _fangornColumns(item) {\n    var tb = this;\n    var selectClass = '';\n    var columns = [];\n    columns.push({\n        data : 'name',\n        folderIcons : true,\n        filter : true,\n        css: selectClass,\n        custom: _fangornDataverseTitle\n    });\n\n    if (tb.options.placement === 'project-files') {\n        columns.push(\n            {\n                data: 'downloads',\n                filter: false,\n                css: ''\n            }\n        );\n    }\n    return columns;\n}\n\n\nfunction _fangornFolderIcons(item) {\n    if (item.data.iconUrl) {\n        return m('img', {\n            src: item.data.iconUrl,\n            style: {\n                width: '16px',\n                height: 'auto'\n            }\n        }, ' ');\n    }\n    return undefined;\n}\n\nfunction _fangornDeleteUrl(item) {\n    return waterbutler.buildTreeBeardDelete(item, {full_path: item.data.path + '?' + $.param({name: item.data.name})});\n}\n\nfunction _fangornLazyLoad(item) {\n    return waterbutler.buildTreeBeardMetadata(item, {version: item.data.version});\n}\n\nfunction _canDrop(item) {\n    return item.data.provider &&\n        item.kind === 'folder' &&\n        item.data.permissions.edit &&\n        item.data.version === 'latest';\n}\n\nFangorn.config.dataverse = {\n    folderIcon: _fangornFolderIcons,\n    resolveDeleteUrl: _fangornDeleteUrl,\n    resolveRows: _fangornColumns,\n    lazyload:_fangornLazyLoad,\n    canDrop: _canDrop,\n    itemButtons: _dataverseItemButtons\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../website/addons/dataverse/static/dataverseFangornConfig.js\n ** module id = 192\n ** module chunks = 5\n **/"],"sourceRoot":""}