{"version":3,"sources":["webpack:///../website/static/js/pages/notifications-config-page.js","webpack:///../~/knockout.punches/index.js?2063**************","webpack:///../website/static/js/notificationsConfig.js","webpack:///../website/static/js/notificationsTreebeard.js","webpack:///../website/static/js/projectSettingsTreebeardBase.js"],"names":[],"mappings":";;;;;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA,CAAC;;;;;;;;ACnBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mGAAmG;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,mBAAmB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,sDAAsD;AACtD;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;AAC9B;;AAEA,wDAAwD,WAAW;AACnE;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+BAA+B;AAClE,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,aAAa,gCAAgC;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,qBAAqB;AACxD;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,YAAY,EAAE;AAC/D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qDAAqD,EAAE,WAAW;AAClE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2EAA2E,mCAAmC;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2EAA2E,OAAO;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA,KAAK;AACL;AACA,KAAK,0BAA0B,oBAAoB;AACnD;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,6FAA6F,OAAO;AACpG;AACA,iFAAiF;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;ACrkBA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,cAAc;AACd;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;ACvEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB;AAClB,mBAAmB,iCAAiC;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,+CAA+C;AAC1F,yBAAyB;AACzB;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iDAAiD,uFAAuF;AACxI,iDAAiD,qHAAqH;AACtK,iDAAiD,uGAAuG;AACxJ;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA,iDAAiD;AACjD,iIAAiI;AACjI;AACA,iDAAiD,uFAAuF;AACxI,iDAAiD,sHAAsH;AACvK,iDAAiD,uGAAuG;AACxJ;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;;;;;;;ACvNA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E","file":"notifications-config-page.js","sourcesContent":["var $ = require('jquery');\n\n// initialize view model for configuring mailchimp subscriptions\nvar NotificationsConfig =  require('../notificationsConfig.js');\nnew NotificationsConfig('#selectLists', window.contextVars.mailingList);\n\n//initialize treebeard for notification subscriptions\nvar ProjectNotifications = require('../notificationsTreebeard.js');\nvar $notificationsMsg = $('#configureNotificationsMessage');\n\n$.ajax({\n    url: '/api/v1/subscriptions',\n    type: 'GET',\n    dataType: 'json'\n}).done( function(response) {\n    new ProjectNotifications(response);\n}).fail( function() {\n    $notificationsMsg.addClass('text-danger');\n    $notificationsMsg.text('Could not retrieve notification settings.');\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../website/static/js/pages/notifications-config-page.js\n ** module id = 0\n ** module chunks = 29\n **/","/**\n * @license Knockout.Punches\n * Enhanced binding syntaxes for Knockout 3+\n * (c) Michael Best\n * License: MIT (http://www.opensource.org/licenses/mit-license.php)\n * Version 0.5.1\n */\nvar ko = require('knockout');\n\n// Add a preprocess function to a binding handler.\nfunction addBindingPreprocessor(bindingKeyOrHandler, preprocessFn) {\n    return chainPreprocessor(getOrCreateHandler(bindingKeyOrHandler), 'preprocess', preprocessFn);\n}\n\n// These utility functions are separated out because they're also used by\n// preprocessBindingProperty\n\n// Get the binding handler or create a new, empty one\nfunction getOrCreateHandler(bindingKeyOrHandler) {\n    return typeof bindingKeyOrHandler === 'object' ? bindingKeyOrHandler :\n        (ko.getBindingHandler(bindingKeyOrHandler) || (ko.bindingHandlers[bindingKeyOrHandler] = {}));\n}\n// Add a preprocess function\nfunction chainPreprocessor(obj, prop, fn) {\n    if (obj[prop]) {\n        // If the handler already has a preprocess function, chain the new\n        // one after the existing one. If the previous function in the chain\n        // returns a falsy value (to remove the binding), the chain ends. This\n        // method allows each function to modify and return the binding value.\n        var previousFn = obj[prop];\n        obj[prop] = function(value, binding, addBinding) {\n            value = previousFn.call(this, value, binding, addBinding);\n            if (value)\n                return fn.call(this, value, binding, addBinding);\n        };\n    } else {\n        obj[prop] = fn;\n    }\n    return obj;\n}\n\n// Add a preprocessNode function to the binding provider. If a\n// function already exists, chain the new one after it. This calls\n// each function in the chain until one modifies the node. This\n// method allows only one function to modify the node.\nfunction addNodePreprocessor(preprocessFn) {\n    var provider = ko.bindingProvider.instance;\n    if (provider.preprocessNode) {\n        var previousPreprocessFn = provider.preprocessNode;\n        provider.preprocessNode = function(node) {\n            var newNodes = previousPreprocessFn.call(this, node);\n            if (!newNodes)\n                newNodes = preprocessFn.call(this, node);\n            return newNodes;\n        };\n    } else {\n        provider.preprocessNode = preprocessFn;\n    }\n}\n\nfunction addBindingHandlerCreator(matchRegex, callbackFn) {\n    var oldGetHandler = ko.getBindingHandler;\n    ko.getBindingHandler = function(bindingKey) {\n        var match;\n        return oldGetHandler(bindingKey) || ((match = bindingKey.match(matchRegex)) && callbackFn(match, bindingKey));\n    };\n}\n\n// Create shortcuts to commonly used ko functions\nvar ko_unwrap = ko.unwrap;\n\n// Create \"punches\" object and export utility functions\nvar ko_punches = ko.punches = {\n    utils: {\n        addBindingPreprocessor: addBindingPreprocessor,\n        addNodePreprocessor: addNodePreprocessor,\n        addBindingHandlerCreator: addBindingHandlerCreator,\n\n        // previous names retained for backwards compitibility\n        setBindingPreprocessor: addBindingPreprocessor,\n        setNodePreprocessor: addNodePreprocessor\n    }\n};\n\nko_punches.enableAll = function () {\n    // Enable interpolation markup\n    enableInterpolationMarkup();\n    enableAttributeInterpolationMarkup();\n\n    // Enable auto-namspacing of attr, css, event, and style\n    enableAutoNamespacedSyntax('attr');\n    enableAutoNamespacedSyntax('css');\n    enableAutoNamespacedSyntax('event');\n    enableAutoNamespacedSyntax('style');\n\n    // Make sure that Knockout knows to bind checked after attr.value (see #40)\n    ko.bindingHandlers.checked.after.push('attr.value');\n\n    // Enable filter syntax for text, html, and attr\n    enableTextFilter('text');\n    enableTextFilter('html');\n    addDefaultNamespacedBindingPreprocessor('attr', filterPreprocessor);\n\n    // Enable wrapped callbacks for click, submit, event, optionsAfterRender, and template options\n    enableWrappedCallback('click');\n    enableWrappedCallback('submit');\n    enableWrappedCallback('optionsAfterRender');\n    addDefaultNamespacedBindingPreprocessor('event', wrappedCallbackPreprocessor);\n    addBindingPropertyPreprocessor('template', 'beforeRemove', wrappedCallbackPreprocessor);\n    addBindingPropertyPreprocessor('template', 'afterAdd', wrappedCallbackPreprocessor);\n    addBindingPropertyPreprocessor('template', 'afterRender', wrappedCallbackPreprocessor);\n};\n// Convert input in the form of `expression | filter1 | filter2:arg1:arg2` to a function call format\n// with filters accessed as ko.filters.filter1, etc.\nfunction filterPreprocessor(input) {\n    // Check if the input contains any | characters; if not, just return\n    if (input.indexOf('|') === -1)\n        return input;\n\n    // Split the input into tokens, in which | and : are individual tokens, quoted strings are ignored, and all tokens are space-trimmed\n    var tokens = input.match(/\"([^\"\\\\]|\\\\.)*\"|'([^'\\\\]|\\\\.)*'|\\|\\||[|:]|[^\\s|:\"'][^|:\"']*[^\\s|:\"']|[^\\s|:\"']/g);\n    if (tokens && tokens.length > 1) {\n        // Append a line so that we don't need a separate code block to deal with the last item\n        tokens.push('|');\n        input = tokens[0];\n        var lastToken, token, inFilters = false, nextIsFilter = false;\n        for (var i = 1, token; token = tokens[i]; ++i) {\n            if (token === '|') {\n                if (inFilters) {\n                    if (lastToken === ':')\n                        input += \"undefined\";\n                    input += ')';\n                }\n                nextIsFilter = true;\n                inFilters = true;\n            } else {\n                if (nextIsFilter) {\n                    input = \"ko.filters['\" + token + \"'](\" + input;\n                } else if (inFilters && token === ':') {\n                    if (lastToken === ':')\n                        input += \"undefined\";\n                    input += \",\";\n                } else {\n                    input += token;\n                }\n                nextIsFilter = false;\n            }\n            lastToken = token;\n        }\n    }\n    return input;\n}\n\n// Set the filter preprocessor for a specific binding\nfunction enableTextFilter(bindingKeyOrHandler) {\n    addBindingPreprocessor(bindingKeyOrHandler, filterPreprocessor);\n}\n\nvar filters = {};\n\n// Convert value to uppercase\nfilters.uppercase = function(value) {\n    return String.prototype.toUpperCase.call(ko_unwrap(value));\n};\n\n// Convert value to lowercase\nfilters.lowercase = function(value) {\n    return String.prototype.toLowerCase.call(ko_unwrap(value));\n};\n\n// Return default value if the input value is empty or null\nfilters['default'] = function (value, defaultValue) {\n    value = ko_unwrap(value);\n    if (typeof value === \"function\") {\n        return value;\n    }\n    if (typeof value === \"string\") {\n        return trim(value) === '' ? defaultValue : value;\n    }\n    return value == null || value.length == 0 ? defaultValue : value;\n};\n\n// Return the value with the search string replaced with the replacement string\nfilters.replace = function(value, search, replace) {\n    return String.prototype.replace.call(ko_unwrap(value), search, replace);\n};\n\nfilters.fit = function(value, length, replacement, trimWhere) {\n    value = ko_unwrap(value);\n    if (length && ('' + value).length > length) {\n        replacement = '' + (replacement || '...');\n        length = length - replacement.length;\n        value = '' + value;\n        switch (trimWhere) {\n            case 'left':\n                return replacement + value.slice(-length);\n            case 'middle':\n                var leftLen = Math.ceil(length / 2);\n                return value.substr(0, leftLen) + replacement + value.slice(leftLen-length);\n            default:\n                return value.substr(0, length) + replacement;\n        }\n    } else {\n        return value;\n    }\n};\n\n// Convert a model object to JSON\nfilters.json = function(rootObject, space, replacer) {     // replacer and space are optional\n    return ko.toJSON(rootObject, replacer, space);\n};\n\n// Format a number using the browser's toLocaleString\nfilters.number = function(value) {\n    return (+ko_unwrap(value)).toLocaleString();\n};\n\n// Export the filters object for general access\nko.filters = filters;\n\n// Export the preprocessor functions\nko_punches.textFilter = {\n    preprocessor: filterPreprocessor,\n    enableForBinding: enableTextFilter\n};\n// Support dynamically-created, namespaced bindings. The binding key syntax is\n// \"namespace.binding\". Within a certain namespace, we can dynamically create the\n// handler for any binding. This is particularly useful for bindings that work\n// the same way, but just set a different named value, such as for element\n// attributes or CSS classes.\nvar namespacedBindingMatch = /([^\\.]+)\\.(.+)/, namespaceDivider = '.';\naddBindingHandlerCreator(namespacedBindingMatch, function (match, bindingKey) {\n    var namespace = match[1],\n        namespaceHandler = ko.bindingHandlers[namespace];\n    if (namespaceHandler) {\n        var bindingName = match[2],\n            handlerFn = namespaceHandler.getNamespacedHandler || defaultGetNamespacedHandler,\n            handler = handlerFn.call(namespaceHandler, bindingName, namespace, bindingKey);\n        ko.bindingHandlers[bindingKey] = handler;\n        return handler;\n    }\n});\n\n// Knockout's built-in bindings \"attr\", \"event\", \"css\" and \"style\" include the idea of\n// namespaces, representing it using a single binding that takes an object map of names\n// to values. This default handler translates a binding of \"namespacedName: value\"\n// to \"namespace: {name: value}\" to automatically support those built-in bindings.\nfunction defaultGetNamespacedHandler(name, namespace, namespacedName) {\n    var handler = ko.utils.extend({}, this);\n    function setHandlerFunction(funcName) {\n        if (handler[funcName]) {\n            handler[funcName] = function(element, valueAccessor) {\n                function subValueAccessor() {\n                    var result = {};\n                    result[name] = valueAccessor();\n                    return result;\n                }\n                var args = Array.prototype.slice.call(arguments, 0);\n                args[1] = subValueAccessor;\n                return ko.bindingHandlers[namespace][funcName].apply(this, args);\n            };\n        }\n    }\n    // Set new init and update functions that wrap the originals\n    setHandlerFunction('init');\n    setHandlerFunction('update');\n    // Clear any preprocess function since preprocessing of the new binding would need to be different\n    if (handler.preprocess)\n        handler.preprocess = null;\n    if (ko.virtualElements.allowedBindings[namespace])\n        ko.virtualElements.allowedBindings[namespacedName] = true;\n    return handler;\n}\n\n// Adds a preprocess function for every generated namespace.x binding. This can\n// be called multiple times for the same binding, and the preprocess functions will\n// be chained. If the binding has a custom getNamespacedHandler method, make sure that\n// it's set before this function is used.\nfunction addDefaultNamespacedBindingPreprocessor(namespace, preprocessFn) {\n    var handler = ko.getBindingHandler(namespace);\n    if (handler) {\n        var previousHandlerFn = handler.getNamespacedHandler || defaultGetNamespacedHandler;\n        handler.getNamespacedHandler = function() {\n            return addBindingPreprocessor(previousHandlerFn.apply(this, arguments), preprocessFn);\n        };\n    }\n}\n\nfunction autoNamespacedPreprocessor(value, binding, addBinding) {\n    if (value.charAt(0) !== \"{\")\n        return value;\n\n    // Handle two-level binding specified as \"binding: {key: value}\" by parsing inner\n    // object and converting to \"binding.key: value\"\n    var subBindings = ko.expressionRewriting.parseObjectLiteral(value);\n    ko.utils.arrayForEach(subBindings, function(keyValue) {\n        addBinding(binding + namespaceDivider + keyValue.key, keyValue.value);\n    });\n}\n\n// Set the namespaced preprocessor for a specific binding\nfunction enableAutoNamespacedSyntax(bindingKeyOrHandler) {\n    addBindingPreprocessor(bindingKeyOrHandler, autoNamespacedPreprocessor);\n}\n\n// Export the preprocessor functions\nko_punches.namespacedBinding = {\n    defaultGetHandler: defaultGetNamespacedHandler,\n    setDefaultBindingPreprocessor: addDefaultNamespacedBindingPreprocessor,    // for backwards compat.\n    addDefaultBindingPreprocessor: addDefaultNamespacedBindingPreprocessor,\n    preprocessor: autoNamespacedPreprocessor,\n    enableForBinding: enableAutoNamespacedSyntax\n};\n// Wrap a callback function in an anonymous function so that it is called with the appropriate\n// \"this\" value.\nfunction wrappedCallbackPreprocessor(val) {\n    // Matches either an isolated identifier or something ending with a property accessor\n    if (/^([$_a-z][$\\w]*|.+(\\.\\s*[$_a-z][$\\w]*|\\[.+\\]))$/i.test(val)) {\n        return 'function(_x,_y,_z){return(' + val + ')(_x,_y,_z);}';\n    } else {\n        return val;\n    }\n}\n\n// Set the wrappedCallback preprocessor for a specific binding\nfunction enableWrappedCallback(bindingKeyOrHandler) {\n    addBindingPreprocessor(bindingKeyOrHandler, wrappedCallbackPreprocessor);\n}\n\n// Export the preprocessor functions\nko_punches.wrappedCallback = {\n    preprocessor: wrappedCallbackPreprocessor,\n    enableForBinding: enableWrappedCallback\n};\n// Attach a preprocess function to a specific property of a binding. This allows you to\n// preprocess binding \"options\" using the same preprocess functions that work for bindings.\nfunction addBindingPropertyPreprocessor(bindingKeyOrHandler, property, preprocessFn) {\n    var handler = getOrCreateHandler(bindingKeyOrHandler);\n    if (!handler._propertyPreprocessors) {\n        // Initialize the binding preprocessor\n        chainPreprocessor(handler, 'preprocess', propertyPreprocessor);\n        handler._propertyPreprocessors = {};\n    }\n    // Add the property preprocess function\n    chainPreprocessor(handler._propertyPreprocessors, property, preprocessFn);\n}\n\n// In order to preprocess a binding property, we have to preprocess the binding itself.\n// This preprocess function splits up the binding value and runs each property's preprocess\n// function if it's set.\nfunction propertyPreprocessor(value, binding, addBinding) {\n    if (value.charAt(0) !== \"{\")\n        return value;\n\n    var subBindings = ko.expressionRewriting.parseObjectLiteral(value),\n        resultStrings = [],\n        propertyPreprocessors = this._propertyPreprocessors || {};\n    ko.utils.arrayForEach(subBindings, function(keyValue) {\n        var prop = keyValue.key, propVal = keyValue.value;\n        if (propertyPreprocessors[prop]) {\n            propVal = propertyPreprocessors[prop](propVal, prop, addBinding);\n        }\n        if (propVal) {\n            resultStrings.push(\"'\" + prop + \"':\" + propVal);\n        }\n    });\n    return \"{\" + resultStrings.join(\",\") + \"}\";\n}\n\n// Export the preprocessor functions\nko_punches.preprocessBindingProperty = {\n    setPreprocessor: addBindingPropertyPreprocessor,     // for backwards compat.\n    addPreprocessor: addBindingPropertyPreprocessor\n};\n// Wrap an expression in an anonymous function so that it is called when the event happens\nfunction makeExpressionCallbackPreprocessor(args) {\n    return function expressionCallbackPreprocessor(val) {\n        return 'function('+args+'){return(' + val + ');}';\n    };\n}\n\nvar eventExpressionPreprocessor = makeExpressionCallbackPreprocessor(\"$data,$event\");\n\n// Set the expressionCallback preprocessor for a specific binding\nfunction enableExpressionCallback(bindingKeyOrHandler, args) {\n    var args = Array.prototype.slice.call(arguments, 1).join();\n    addBindingPreprocessor(bindingKeyOrHandler, makeExpressionCallbackPreprocessor(args));\n}\n\n// Export the preprocessor functions\nko_punches.expressionCallback = {\n    makePreprocessor: makeExpressionCallbackPreprocessor,\n    eventPreprocessor: eventExpressionPreprocessor,\n    enableForBinding: enableExpressionCallback\n};\n\n// Create an \"on\" namespace for events to use the expression method\nko.bindingHandlers.on = {\n    getNamespacedHandler: function(eventName) {\n        var handler = ko.getBindingHandler('event' + namespaceDivider + eventName);\n        return addBindingPreprocessor(handler, eventExpressionPreprocessor);\n    }\n};\n// Performance comparison at http://jsperf.com/markup-interpolation-comparison\nfunction parseInterpolationMarkup(textToParse, outerTextCallback, expressionCallback) {\n    function innerParse(text) {\n        var innerMatch = text.match(/^([\\s\\S]*)}}([\\s\\S]*?)\\{\\{([\\s\\S]*)$/);\n        if (innerMatch) {\n            innerParse(innerMatch[1]);\n            outerTextCallback(innerMatch[2]);\n            expressionCallback(innerMatch[3]);\n        } else {\n            expressionCallback(text);\n        }\n    }\n    var outerMatch = textToParse.match(/^([\\s\\S]*?)\\{\\{([\\s\\S]*)}}([\\s\\S]*)$/);\n    if (outerMatch) {\n        outerTextCallback(outerMatch[1]);\n        innerParse(outerMatch[2]);\n        outerTextCallback(outerMatch[3]);\n    }\n}\n\nfunction trim(string) {\n    return string == null ? '' :\n        string.trim ?\n            string.trim() :\n            string.toString().replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '');\n}\n\nfunction interpolationMarkupPreprocessor(node) {\n    // only needs to work with text nodes\n    if (node.nodeType === 3 && node.nodeValue && node.nodeValue.indexOf('{{') !== -1 && (node.parentNode || {}).nodeName != \"TEXTAREA\") {\n        var nodes = [];\n        function addTextNode(text) {\n            if (text)\n                nodes.push(document.createTextNode(text));\n        }\n        function wrapExpr(expressionText) {\n            if (expressionText)\n                nodes.push.apply(nodes, ko_punches_interpolationMarkup.wrapExpression(expressionText, node));\n        }\n        parseInterpolationMarkup(node.nodeValue, addTextNode, wrapExpr)\n\n        if (nodes.length) {\n            if (node.parentNode) {\n                for (var i = 0, n = nodes.length, parent = node.parentNode; i < n; ++i) {\n                    parent.insertBefore(nodes[i], node);\n                }\n                parent.removeChild(node);\n            }\n            return nodes;\n        }\n    }\n}\n\nif (!ko.virtualElements.allowedBindings.html) {\n    // Virtual html binding\n    // SO Question: http://stackoverflow.com/a/15348139\n    var overridden = ko.bindingHandlers.html.update;\n    ko.bindingHandlers.html.update = function (element, valueAccessor) {\n        if (element.nodeType === 8) {\n            var html = ko_unwrap(valueAccessor());\n            if (html != null) {\n                var parsedNodes = ko.utils.parseHtmlFragment('' + html);\n                ko.virtualElements.setDomNodeChildren(element, parsedNodes);\n            } else {\n                ko.virtualElements.emptyNode(element);\n            }\n        } else {\n            overridden(element, valueAccessor);\n        }\n    };\n    ko.virtualElements.allowedBindings.html = true;\n}\n\nfunction wrapExpression(expressionText, node) {\n    var ownerDocument = node ? node.ownerDocument : document,\n        closeComment = true,\n        binding,\n        expressionText = trim(expressionText),\n        firstChar = expressionText[0],\n        lastChar = expressionText[expressionText.length - 1],\n        result = [],\n        matches;\n\n    if (firstChar === '#') {\n        if (lastChar === '/') {\n            binding = expressionText.slice(1, -1);\n        } else {\n            binding = expressionText.slice(1);\n            closeComment = false;\n        }\n        if (matches = binding.match(/^([^,\"'{}()\\/:[\\]\\s]+)\\s+([^\\s:].*)/)) {\n            binding = matches[1] + ':' + matches[2];\n        }\n    } else if (firstChar === '/') {\n        // replace only with a closing comment\n    } else if (firstChar === '{' && lastChar === '}') {\n        binding = \"html:\" + trim(expressionText.slice(1, -1));\n    } else {\n        binding = \"text:\" + trim(expressionText);\n    }\n\n    if (binding)\n        result.push(ownerDocument.createComment(\"ko \" + binding));\n    if (closeComment)\n        result.push(ownerDocument.createComment(\"/ko\"));\n    return result;\n};\n\nfunction enableInterpolationMarkup() {\n    addNodePreprocessor(interpolationMarkupPreprocessor);\n}\n\n// Export the preprocessor functions\nvar ko_punches_interpolationMarkup = ko_punches.interpolationMarkup = {\n    preprocessor: interpolationMarkupPreprocessor,\n    enable: enableInterpolationMarkup,\n    wrapExpression: wrapExpression\n};\n\n\nvar dataBind = 'data-bind';\nfunction attributeInterpolationMarkerPreprocessor(node) {\n    if (node.nodeType === 1 && node.attributes.length) {\n        var dataBindAttribute = node.getAttribute(dataBind);\n        for (var attrs = ko.utils.arrayPushAll([], node.attributes), n = attrs.length, i = 0; i < n; ++i) {\n            var attr = attrs[i];\n            if (attr.specified && attr.name != dataBind && attr.value.indexOf('{{') !== -1) {\n                var parts = [], attrValue = '';\n                function addText(text) {\n                    if (text)\n                        parts.push('\"' + text.replace(/\"/g, '\\\\\"') + '\"');\n                }\n                function addExpr(expressionText) {\n                    if (expressionText) {\n                        attrValue = expressionText;\n                        parts.push('ko.unwrap(' + expressionText + ')');\n                    }\n                }\n                parseInterpolationMarkup(attr.value, addText, addExpr);\n\n                if (parts.length > 1) {\n                    attrValue = '\"\"+' + parts.join('+');\n                }\n\n                if (attrValue) {\n                    var attrName = attr.name.toLowerCase();\n                    var attrBinding = ko_punches_attributeInterpolationMarkup.attributeBinding(attrName, attrValue, node) || attributeBinding(attrName, attrValue, node);\n                    if (!dataBindAttribute) {\n                        dataBindAttribute = attrBinding\n                    } else {\n                        dataBindAttribute += ',' + attrBinding;\n                    }\n                    node.setAttribute(dataBind, dataBindAttribute);\n                    // Using removeAttribute instead of removeAttributeNode because IE clears the\n                    // class if you use removeAttributeNode to remove the id.\n                    node.removeAttribute(attr.name);\n                }\n            }\n        }\n    }\n}\n\nfunction attributeBinding(name, value, node) {\n    if (ko.getBindingHandler(name)) {\n        return name + ':' + value;\n    } else {\n        return 'attr.' + name + ':' + value;\n    }\n}\n\nfunction enableAttributeInterpolationMarkup() {\n    addNodePreprocessor(attributeInterpolationMarkerPreprocessor);\n}\n\nvar ko_punches_attributeInterpolationMarkup = ko_punches.attributeInterpolationMarkup = {\n    preprocessor: attributeInterpolationMarkerPreprocessor,\n    enable: enableAttributeInterpolationMarkup,\n    attributeBinding: attributeBinding\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../~/knockout.punches/index.js\n ** module id = 152\n ** module chunks = 1 2 4 6 7 8 9 10 12 17 18 22 23 24 27 29 30 31 35 36 37 42 53\n **/","'use strict';\n\nvar ko = require('knockout');\nrequire('knockout.punches');\nvar $ = require('jquery');\nvar $osf = require('js/osfHelpers');\nko.punches.enableAll();\n\nvar ViewModel = function(list) {\n    var self = this;\n    self.list = list;\n    self.subscribed = ko.observable();\n    // Flashed messages\n    self.message = ko.observable('');\n    self.messageClass = ko.observable('text-success');\n\n    self.getListInfo = function() {\n        $.ajax({\n            url: '/api/v1/settings/notifications',\n            type: 'GET',\n            dataType: 'json',\n            success: function(response) {\n                var isSubscribed = response.mailing_lists ? response.mailing_lists[self.list] : false;\n                self.subscribed(isSubscribed);\n            },\n            error: function() {\n                var message = 'Could not retrieve settings information.';\n                self.changeMessage(message, 'text-danger', 5000);\n            }});\n    };\n\n    self.getListInfo();\n\n    /** Change the flashed status message */\n    self.changeMessage = function(text, css, timeout) {\n        self.message(text);\n        var cssClass = css || 'text-info';\n        self.messageClass(cssClass);\n        if (timeout) {\n            // Reset message after timeout period\n            setTimeout(function() {\n                self.message('');\n                self.messageClass('text-info');\n            }, timeout);\n        }\n    };\n\n    self.submit = function () {\n        var payload = {};\n        payload[self.list] = self.subscribed();\n        var request = $osf.postJSON('/api/v1/settings/notifications/', payload);\n        request.done(function () {\n            self.changeMessage('Settings updated.', 'text-success', 5000);\n        });\n        request.fail(function (xhr) {\n            if (xhr.responseJSON.error_type !== 'not_subscribed') {\n                var message = 'Could not update email preferences at this time. If this issue persists, ' +\n                    'please report it to <a href=\"mailto:support@osf.io\">support@osf.io</a>.';\n                self.changeMessage(message, 'text-danger', 5000);\n            }\n        });\n    };\n};\n\n// API\nfunction NotificationsViewModel(selector, list) {\n    var self = this;\n    self.viewModel = new ViewModel(list);\n    $osf.applyBindings(self.viewModel, selector);\n}\n\nmodule.exports = NotificationsViewModel;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../website/static/js/notificationsConfig.js\n ** module id = 375\n ** module chunks = 29\n **/","'use strict';\n\nvar $ = require('jquery');\nvar m = require('mithril');\nvar Treebeard = require('treebeard');\nvar $osf = require('js/osfHelpers');\nvar projectSettingsTreebeardBase = require('js/projectSettingsTreebeardBase');\n\nfunction expandOnLoad() {\n    var tb = this;  // jshint ignore: line\n    for (var i = 0; i < tb.treeData.children.length; i++) {\n        var parent = tb.treeData.children[i];\n        tb.updateFolder(null, parent);\n        expandChildren(tb, parent.children);\n    }\n}\n\nfunction expandChildren(tb, children) {\n    var openParent = false;\n    for (var i = 0; i < children.length; i++) {\n        var child = children[i];\n        var parent = children[i].parent();\n        if (child.data.kind === 'event' && child.data.event.notificationType !== 'adopt_parent') {\n            openParent = true;\n        }\n        if (child.children.length > 0) {\n            expandChildren(tb, child.children);\n        }\n    }\n    if (openParent) {\n        openAncestors(tb, children[0]);\n    }\n}\n\nfunction openAncestors (tb, item) {\n    var parent = item.parent();\n    if(parent && parent.id > 0) {\n        tb.updateFolder(null, parent);\n        openAncestors(tb, parent);\n    }\n}\n\nfunction subscribe(item, notification_type) {\n    var id = item.parent().data.node.id;\n    var event = item.data.event.title;\n    var payload = {\n        'id': id,\n        'event': event,\n        'notification_type': notification_type\n    };\n    $osf.postJSON(\n        '/api/v1/subscriptions/',\n        payload\n    ).done(function(){\n        //'notfiy-success' is to override default class 'success' in treebeard\n        item.notify.update('Settings updated', 'notify-success', 1, 2000);\n        item.data.event.notificationType = notification_type;\n    }).fail(function() {\n        item.notify.update('Could not update settings', 'notify-danger', 1, 2000);\n    });\n}\n\nfunction displayParentNotificationType(item){\n    var notificationTypeDescriptions = {\n        'email_transactional': 'Instantly',\n        'email_digest': 'Daily',\n        'adopt_parent': 'Adopt setting from parent project',\n        'none': 'Never'\n    };\n\n    if (item.data.event.parent_notification_type) {\n        if (item.parent().parent().parent() === undefined) {\n            return '(' + notificationTypeDescriptions[item.data.event.parent_notification_type] + ')';\n        }\n    }\n    return '';\n}\n\n\nfunction ProjectNotifications(data) {\n\n    //  Treebeard version\n    var tbOptions = $.extend({}, projectSettingsTreebeardBase.defaults, {\n        divID: 'grid',\n        filesData: data,\n        naturalScrollLimit : 0,\n        resolveRows: function notificationResolveRows(item){\n            var columns = [];\n            var iconcss = '';\n            // check if should not get icon\n            if(item.children.length < 1 ){\n                iconcss = 'tb-no-icon';\n            }\n            if (item.data.kind === 'heading') {\n                if (item.data.children.length === 0) {\n                    columns.push({\n                        data : 'project',  // Data field name\n                        folderIcons : false,\n                        filter : true,\n                        sortInclude : false,\n                        custom : function() {\n                            return m('div[style=\"padding-left:5px\"]',\n                                        [m ('p', [\n                                                m('b', item.data.node.title + ': '),\n                                                m('span[class=\"text-warning\"]', ' No configured projects.')]\n                                        )]\n                            );\n                        }\n                    });\n                } else {\n                    columns.push({\n                        data : 'project',  // Data field name\n                        folderIcons : false,\n                        filter : true,\n                        sortInclude : false,\n                        custom : function() {\n                            return m('div[style=\"padding-left:5px\"]',\n                                    [m('p',\n                                        [m('b', item.data.node.title + ':')]\n                                )]\n                            );\n                        }\n                    });\n                }\n            }\n            else if (item.data.kind === 'folder' || item.data.kind === 'node') {\n                columns.push({\n                    data : 'project',  // Data field name\n                    folderIcons : true,\n                    filter : true,\n                    sortInclude : false,\n                    custom : function() {\n                        if (item.data.node.url !== '') {\n                            return m('a', { href : item.data.node.url, target : '_blank' }, item.data.node.title);\n                        } else {\n                            return m('span', item.data.node.title);\n                        }\n\n                    }\n                });\n            }\n            else if (item.parent().data.kind === 'folder' || item.parent().data.kind === 'heading' && item.data.kind === 'event') {\n                columns.push(\n                {\n                    data : 'project',  // Data field name\n                    folderIcons : true,\n                    filter : true,\n                    css : iconcss,\n                    sortInclude : false,\n                    custom : function(item, col) {\n                        return item.data.event.description;\n                    }\n                },\n                {\n                    data : 'notificationType',  // Data field name\n                    folderIcons : false,\n                    filter : false,\n                    custom : function(item, col) {\n                        return m('div[style=\"padding-right:10px\"]',\n                            [m('select.form-control', {\n                                onchange: function(ev) {\n                                    subscribe(item, ev.target.value);\n                                }},\n                                [\n                                    m('option', {value: 'none', selected : item.data.event.notificationType === 'none' ? 'selected': ''}, 'Never'),\n                                    m('option', {value: 'email_transactional', selected : item.data.event.notificationType === 'email_transactional' ? 'selected': ''}, 'Instantly'),\n                                    m('option', {value: 'email_digest', selected : item.data.event.notificationType === 'email_digest' ? 'selected': ''}, 'Daily')\n                            ])\n                        ]);\n                    }\n                });\n            }\n            else {\n                columns.push(\n                {\n                    data : 'project',  // Data field name\n                    folderIcons : true,\n                    filter : true,\n                    css : iconcss,\n                    sortInclude : false,\n                    custom : function() {\n                        return item.data.event.description;\n\n                    }\n                },\n                {\n                    data : 'notificationType',  // Data field name\n                    folderIcons : false,\n                    filter : false,\n                    custom : function() {\n                        return  m('div[style=\"padding-right:10px\"]',\n                            [m('select.form-control', {\n                                onchange: function(ev) {\n                                    subscribe(item, ev.target.value);\n                                }},\n                                [\n                                    m('option', {value: 'adopt_parent',\n                                                 selected: item.data.event.notificationType === 'adopt_parent' ? 'selected' : ''},\n                                                 'Adopt setting from parent project ' + displayParentNotificationType(item)),\n                                    m('option', {value: 'none', selected : item.data.event.notificationType === 'none' ? 'selected': ''}, 'Never'),\n                                    m('option', {value: 'email_transactional',  selected : item.data.event.notificationType === 'email_transactional' ? 'selected': ''}, 'Instantly'),\n                                    m('option', {value: 'email_digest', selected : item.data.event.notificationType === 'email_digest' ? 'selected': ''}, 'Daily')\n                            ])\n                        ]);\n                    }\n                });\n            }\n\n            return columns;\n        }\n    });\n    var grid = new Treebeard(tbOptions);\n    expandOnLoad.call(grid.tbController);\n}\n\nmodule.exports = ProjectNotifications;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../website/static/js/notificationsTreebeard.js\n ** module id = 376\n ** module chunks = 29 38\n **/","/**\n * Treebeard base for project settings\n * Currently used for wiki and notification settings\n */\n\n'use strict';\n\nvar $ = require('jquery');\nvar m = require('mithril');\nvar Treebeard = require('treebeard');\nvar Fangorn = require('js/fangorn');\n\n\nfunction resolveToggle(item) {\n    var toggleMinus = m('i.fa.fa-minus', ' '),\n        togglePlus = m('i.fa.fa-plus', ' ');\n\n    if (item.children.length > 0) {\n        if (item.open) {\n            return toggleMinus;\n        }\n        return togglePlus;\n    }\n    item.open = true;\n    return '';\n}\n\nmodule.exports = {\n    defaults: {\n        rowHeight : 33,         // user can override or get from .tb-row height\n        resolveToggle: resolveToggle,\n        paginate : false,       // Whether the applet starts with pagination or not.\n        paginateToggle : false, // Show the buttons that allow users to switch between scroll and paginate.\n        uploads : false,         // Turns dropzone on/off.\n        resolveIcon : Fangorn.Utils.resolveIconView,\n        hideColumnTitles: true,\n        columnTitles : function columnTitles(item, col) {\n            return [\n                {\n                    title: 'Project',\n                    width: '60%',\n                    sortType : 'text',\n                    sort : false\n                },\n                {\n                    title: 'Editing Toggle',\n                    width : '40%',\n                    sort : false\n\n                }\n            ];\n        },\n        ontogglefolder : function (item){\n            var containerHeight = this.select('#tb-tbody').height();\n            this.options.showTotal = Math.floor(containerHeight / this.options.rowHeight) + 1;\n            this.redraw();\n        },\n        sortButtonSelector : {\n            up : 'i.fa.fa-chevron-up',\n            down : 'i.fa.fa-chevron-down'\n        },\n        showFilter : false,     // Gives the option to filter by showing the filter box.\n        allowMove : false,       // Turn moving on or off.\n        hoverClass : '',\n        resolveRefreshIcon : function() {\n          return m('i.fa.fa-refresh.fa-spin');\n        }\n    }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ../website/static/js/projectSettingsTreebeardBase.js\n ** module id = 377\n ** module chunks = 29 38\n **/"],"sourceRoot":""}