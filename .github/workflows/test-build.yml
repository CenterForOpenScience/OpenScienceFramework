name: OSF.io backend test build v0.1

on: [push, pull_request]

env:
  WHEELHOUSE: /cache/wheelhouse
  LIBXML2_DEB: libxml2-dbg_2.9.1+dfsg1-3ubuntu4.9_amd64.deb
  POSTGRES_DEB: postgresql-9.6_9.6.3-1.pgdg12.4+1_amd64.deb
  ELASTICSEARCH_ARCHIVE: elasticsearch-2.4.5.tar.gz
  ELASTICSEARCH6_ARCHIVE: elasticsearch-6.3.1.tar.gz
  LIBJEMALLOC_DEB: libjemalloc1_3.5.1-2_amd64.deb
  LIBPCRE_DEB: libpcre3_8.31-2ubuntu2.3_amd64.deb
  OSF_DB_PORT: 54321

jobs:
  build-cache:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - id: cache-objects
      uses: actions/cache@v2
      with:
        path: ./cache
        key: cached_node_modules_${{ hashFiles('**/cache/') }}
        restore-keys: cached_node_modules_
    - if: steps.cache-objects.outputs.cache-hit != 'true'
      run: |
        mkdir -p ./cache/downloads
        mkdir -p ./cache/pip
        mkdir -p ./cache/wheelhouse
        mkdir -p ./cache/testmon
        rm -rf node_modules  ## TODO remove this later

  build-es:
    runs-on: ubuntu-latest
    needs: build-cache

    steps:
    - uses: actions/checkout@v2
    - id: cache-objects
      uses: actions/cache@v2
      with:
        path: ./cache
        key: cached_node_modules_${{ hashFiles('**/cache/') }}
        restore-keys: cached_node_modules_
    - id: ES-Step-1
      run: |
        cd ./cache/downloads
        if [ ! -f "${{ env.ELASTICSEARCH_ARCHIVE }}" ]; then
          curl -SLO https://download.elasticsearch.org/elasticsearch/elasticsearch/${{ env.ELASTICSEARCH_ARCHIVE }}
        fi

        if [ ! -f "${{ env.ELASTICSEARCH_ARCHIVE }}.sha1.txt" ]; then
          curl -SLO https://download.elasticsearch.org/elasticsearch/elasticsearch/${{ env.ELASTICSEARCH_ARCHIVE.sha1.txt }}
        fi

        sha1sum --check ${{ env.ELASTICSEARCH_ARCHIVE }}.sha1.txt

        mkdir -p /tmp/elasticsearch
        tar xzf ${{ env.ELASTICSEARCH_ARCHIVE }} -C /tmp/elasticsearch --strip-components=1
    - id: ES-Step-2
      run: /tmp/elasticsearch/bin/elasticsearch > /dev/null & export ELASTICSEARCH_PID=$!
    - id: ES-Step-3
      run: |
       while true; do
          sleep 5
          curl -sf http://localhost:9200/_cluster/health?wait_for_status=yellow
          if [ $? -eq 0 ]; then
            break
          fi
       done


  build-postgres:
    runs-on: ubuntu-latest

    container: node:10.18-jessie

    services:
      postgres:
        image: postgres

        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Connect to postgresql
        run: node client.js
        env:
          POSTGRES_HOST: postgres
          POSTGRES_PORT: ${{ env.OSF_DB_PORT }}


  build-es6:
    runs-on: ubuntu-latest
    needs: build-cache

    steps:
    - uses: actions/checkout@v2
    - id: cache-objects
      uses: actions/cache@v2
      with:
        path: ./cache
        key: cached_node_modules_${{ hashFiles('**/cache/') }}
        restore-keys: cached_node_modules_
    - id: ES6-Step-1
      run: |
        if [ ! -f "${{ env.ELASTICSEARCH6_ARCHIVE }}" ]; then
          curl -SLO https://artifacts.elastic.co/downloads/elasticsearch/${{ env.ELASTICSEARCH6_ARCHIVE }}
        fi

        if [ ! -f "${{ env.ELASTICSEARCH6_ARCHIVE }}.sha1.txt" ]; then
          curl -SLO https://artifacts.elastic.co/downloads/elasticsearch/${{ env.ELASTICSEARCH6_ARCHIVE }}.sha1.txt
        fi

        sha1sum --check ${{ env.ELASTICSEARCH6_ARCHIVE }}.sha1.txt

        mkdir -p /tmp/elasticsearch6
        tar xzf ${{ env.ELASTICSEARCH6_ARCHIVE }} -C /tmp/elasticsearch6 --strip-components=1
    - id: ES6-Step-2
      run: /tmp/elasticsearch6/bin/elasticsearch > /dev/null & export ELASTICSEARCH6_PID=$!
    - id: ES6-Step-3
      run: |
        while true; do
          sleep 5
          curl -sf http://localhost:9201/_cluster/health?wait_for_status=yellow
          if [ $? -eq 0 ]; then
            break
          fi
        done

  start-build:
    runs-on: ubuntu-latest
    needs: [build-es, build-es6, build-postgres]
    strategy:
      matrix:
        python-version: [3.6]
    steps:
    - uses: actions/checkout@v2
    - id: cache-objects
      uses: actions/cache@v2
      with:
        path: ./cache
        key: cached_node_modules_${{ hashFiles('**/cache/') }}
        restore-keys: cached_node_modules_
    - name: Set up Python ${{ matrix.python-version}}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Copy Settings
      run: |
        cp website/settings/local-travis.py website/settings/local.py
        cp api/base/settings/local-travis.py api/base/settings/local.py
        '[ -d ./preprints ] || ( mkdir -p ./preprints && touch ./preprints/index.html )'
    - name: PIP install
      run: |
        pip install --upgrade pip
        pip install invoke==0.13.0
        pip install flake8=2.4.0 --force-reinstall --upgrade
        invoke wheelhouse --dev --addons
    - name: Other installs
      run: |
        pip install psycopg2==2.7.3 --no-binary psycopg2
        invoke requirements --dev --addons
        pip uninstall uritemplate.py --yes
        pip install uritemplate.py==0.3.0

  addons:
    runs-on: ubuntu-latest
    needs: start-build
    steps:
    - uses: actions/checkout@v2
    - id: cache-objects
      uses: actions/cache@v2
      with:
        path: ./cache
        key: cached_node_modules_${{ hashFiles('**/cache/') }}
        restore-keys: cached_node_modules_
    - name: Run tests
      run: invoke test_travis_addons -n 1

  website:
    runs-on: ubuntu-latest
    needs: start-build
    steps:
    - uses: actions/checkout@v2
    - id: cache-objects
      uses: actions/cache@v2
      with:
        path: ./cache
        key: cached_node_modules_${{ hashFiles('**/cache/') }}
        restore-keys: cached_node_modules_
    - name: Run tests
      run: invoke test_travis_website -n 1

  api1_and_js:
    runs-on: ubuntu-latest
    needs: start-build
    steps:
      - uses: actions/checkout@v2
      - id: cache-objects
        uses: actions/cache@v2
        with:
          path: ./cache
          key: cached_node_modules_${{ hashFiles('**/cache/') }}
          restore-keys: cached_node_modules_
      - name: NVM & yarn install
        run: |
         nvm install 8.6.0
         nvm use 8.6.0
         curl -o- -L https://yarnpkg.com/install.sh | bash
         export PATH=./.yarn/bin:$PATH
         travis_retry invoke assets --dev
      - name: Run test
        run: invoke test_travis_api1_and_js -n 1

  api2:
    runs-on: ubuntu-latest
    needs: start-build
    steps:
    - uses: actions/checkout@v2
    - id: cache-objects
      uses: actions/cache@v2
      with:
        path: ./cache
        key: cached_node_modules_${{ hashFiles('**/cache/') }}
        restore-keys: cached_node_modules_
    - name: Run tests
      run: invoke test_travis_api2 -n 1

  api3_and_osf:
    runs-on: ubuntu-latest
    needs: start-build
    steps:
    - uses: actions/checkout@v2
    - id: cache-objects
      uses: actions/cache@v2
      with:
        path: ./cache
        key: cached_node_modules_${{ hashFiles('**/cache/') }}
        restore-keys: cached_node_modules_
    - name: Run tests
      run: invoke test_travis_api3_and_osf -n 1



